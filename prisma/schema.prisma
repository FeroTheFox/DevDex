generator client {
  provider        = "prisma-client-js"
  // NixOS prisma complains if we don't put this here
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Post {
  id             Int      @id @default(autoincrement())
  title          String?  @db.VarChar(255)
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @updatedAt @map(name: "updated_at")
  content        String   @db.Text
  tags           Tag[]
  children       Post[]   @relation("replies")
  depth          Int
  published      Boolean  @default(true)
  likedBy        User[]   @relation(name: "likes")
  favoritesCount User[]   @relation(name: "favorites")
  author         User     @relation(name: "author", fields: [authorId], references: [id])
  authorId       String
  parent         Post?    @relation(name: "replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId       Int?
  isReply        Boolean  @db.TinyInt

  @@index([authorId])
  @@index([parentId])

  @@fulltext([title])
  @@fulltext([content])
  @@fulltext([title, content])
}

model Tag {
  id             Int    @id @default(autoincrement())
  name           String @unique @db.VarChar(255)
  favoritesCount User[] @relation(name: "user_favorite_tags")
  posts          Post[]
}

model Badge {
  id          Int    @id @default(autoincrement())
  name        String @unique
  displayName String
  User        User[] @relation("user_badges")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  email         String    @unique @db.VarChar(320)
  emailVerified DateTime?
  finishedSetup Boolean   @default(false) @db.TinyInt
  flair         String    @default("@") @db.VarChar(6)
  name          String?
  username      String    @unique @default(cuid()) @db.VarChar(30)
  image         String?
  banner        String?
  color         String    @default("000000") @db.VarChar(7)
  bio           String?
  premium       Boolean   @default(false) @db.TinyInt
  staff         Boolean   @default(false) @db.TinyInt
  posts         Post[]    @relation(name: "author")
  likes         Post[]    @relation(name: "likes")
  favorites     Post[]    @relation(name: "favorites")
  favoriteTags  Tag[]     @relation("user_favorite_tags")
  badges        Badge[]   @relation("user_badges")
  accounts      Account[]
  sessions      Session[]

  @@unique([id, image, username, flair])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
